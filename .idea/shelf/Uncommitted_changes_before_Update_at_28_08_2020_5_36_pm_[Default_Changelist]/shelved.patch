Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nfrom bottle import Bottle, template, static_file, redirect, request, response\r\nimport database\r\nimport users\r\nimport re\r\nimport os\r\n\r\napp = Bottle()\r\n\r\n@app.route('/static/<filename:path>')\r\ndef static(filename):\r\n\r\n    \"\"\"Static file Handling method for all static files in root static\"\"\"\r\n\r\n    return static_file(filename=filename, root='static')\r\n\r\n@app.route('/')\r\ndef index(db):\r\n    \"\"\"handles routing to main page\"\"\"\r\n    pageInfo = {'title': 'Account'}\r\n    loginisTrue = False\r\n    tasksexist = False\r\n\r\n    if users.session_user(db):\r\n        loginisTrue = True\r\n\r\n    return template('index', pageInfo, authenticated=users.session_user(db), tasksexist=tasksexist, loginIsTrue=loginisTrue)\r\n\r\n@app.route('/about')\r\ndef about(db):\r\n    \"\"\"made this page to test session cookie function\"\"\"\r\n\r\n    info = {'title': 'About'}\r\n\r\n    return template('About', info, authenticated=users.session_user(db))\r\n\r\n@app.get('/accountSettings')\r\ndef account_settings(db):\r\n    \"\"\"Update account details or settings, must enter password to be able to do so\"\"\"\r\n\r\n    info = {'title': 'Account',\r\n            'bannerMessage': '',}\r\n    return template('account', info, authenticated=users.session_user(db),validated=False, invalidPword=False)\r\n\r\n@app.route('/createAccount')\r\ndef accountPage(db):\r\n    \"\"\"handles routing to account creation page\"\"\"\r\n\r\n    pageInfo = {'title': 'Create Account',\r\n                'bannerMessage': 'Create an account'}\r\n\r\n    return template('createAccount', pageInfo, authenticated=users.session_user(db))\r\n\r\n@app.post('/createAcc')\r\ndef route(db):\r\n    \"\"\"handles new account creation\r\n    \"\"\"\r\n    info = {'title': 'Creation Error',\r\n            'bannerMessage': 'An account under this email already exists please login or try another email'\r\n    }\r\n\r\n    info1 = {'title': 'Creation Error',\r\n            'bannerMessage': 'Password must contain at least 1 capital letter, 1 number and be atleast 7 characters long'\r\n    }\r\n\r\n    password = request.forms.get(\"password\")\r\n    pWordResult = password_test(password)\r\n    if not pWordResult:\r\n        return template('createAccount', info1, authenticated=users.session_user(db))\r\n\r\n    email = request.forms.get(\"email\")\r\n    \"SHOULD PROBS ADD JAVASCRIPT TO CHECK name and suburb ARE FILLED AND CHECK FILE TYPE OF IMAGE\"\r\n    name = request.forms.get(\"name\")\r\n    suburb = request.forms.get(\"suburb\")\r\n    image = request.files.get(\"image\")\r\n    log = database.add_user(db, password, email, name, suburb)\r\n\r\n    if log: #if user is valid\r\n        if image is not None:\r\n            uid = users.return_userID(db, email)\r\n            imagePath = userImage_upload(uid, image)\r\n            database.update_avatar(db, uid, imagePath)\r\n\r\n        users.generate_session(db, name)\r\n        return redirect('/')\r\n    else:\r\n        return template('createAccount', info, authenticated=users.session_user(db))\r\n\r\n@app.post('/updateAccount')\r\ndef account_update(db):\r\n    \"\"\"handles account updates\"\"\"\r\n\r\n    info = {'title': 'Account',\r\n            'bannerMessage': 'Populated fields updated'\r\n            }\r\n\r\n    flag = False\r\n    uid = users.return_userID(db, users.session_user(db))\r\n    password = request.forms.get(\"pword\")\r\n    if len(password) > 0:\r\n        if password_test(password):\r\n            newPassword = database.password_hash(db, password, uid)\r\n            if newPassword is not False:\r\n                database.update_password(db, newPassword, uid)\r\n            else:\r\n                flag = True\r\n        else:\r\n            flag = True\r\n\r\n    suburb = request.forms.get(\"suburb\")\r\n    if len(suburb) > 0:\r\n        database.update_suburb(db, suburb, uid)\r\n\r\n    name = request.forms.get(\"name\")\r\n    if len(name) > 0:\r\n        database.update_name(db, name, uid)\r\n\r\n    image = request.files.get(\"image\")\r\n    if image is not None:\r\n        imagePath = userImage_upload(uid, image)\r\n        database.update_avatar(db, uid, imagePath)\r\n\r\n    return template('account', info, authenticated=users.session_user(db), validated=True, invalidPword=flag)\r\n\r\n\r\ndef password_test(pWord):\r\n    \"\"\" Tests if password is atleast 7 characters and contains atleast 1 capital letter\"\"\"\r\n    password = pWord\r\n    rgx = re.compile(r'\\d.*?[A-Z].*?[a-z]')\r\n    if rgx.match(''.join(sorted(password))) and len(password) >= 7:\r\n        return True\r\n    return False\r\n\r\ndef userImage_upload(user, image):\r\n\r\n    root = os.path.abspath(os.curdir)# does this line work on all os' ?\r\n    path = root + \"/static/userImages/\" + \"DP user -- \" + str(user) + \" -- \" + image.filename\r\n    image.save(path, overwrite=True)\r\n    return path\r\n\r\n\r\n@app.post('/pwordCheck')\r\ndef acc(db):\r\n    \"\"\"validates password\"\"\"\r\n    info = {'title': 'Account',\r\n            'bannerMessage':''}\r\n    info1 = {'title': 'Account',\r\n            'bannerMessage': 'Wrong Password'}\r\n\r\n    password = request.forms.get(\"password\")\r\n    usern= users.session_user(db)\r\n    result = users.check_password(db, usern, database.password_hash(db,password,usern))\r\n    if(result):\r\n        return template('account', info, authenticated=users.session_user(db), validated=True, invalidPword=False)\r\n    else:\r\n        return template('account', info1, authenticated=users.session_user(db), validated=False, invalidPword=False)\r\n\r\n\r\n\r\n@app.post('/login')\r\ndef route(db):\r\n    \"\"\"handles login of users,\r\n    form data is proccessed (taken from the login form), from here data is checked to see if user is valid, if so\r\n    a session is generated for the user and then the user is redirected to the index page otherwise they are\r\n    redirected to a page where they must enter their credentials again, the user is kept on this page until correct\r\n    credentials are entered at which point they are redirected to the index page logged in,\r\n\r\n    A cookie is assigned to each valid user once they login through the function users.generate_session()\r\n    in order to track whether they are logged in or not\r\n    \"\"\"\r\n    info = {'title': 'Login Error, please try to login again or create an account'}\r\n\r\n    name = request.forms.get(\"name\")\r\n    password = request.forms.get(\"password\")\r\n    log = users.check_login(db, name, password)\r\n    if(log):#if user is valid\r\n        users.generate_session(db,name)\r\n        return redirect('/')\r\n    else:\r\n        return template('splash', info, authenticated=users.session_user(db))\r\n\r\n\r\n@app.post('/logout', methods=['GET'])\r\ndef logout(db):\r\n    \"\"\"\"handles logging out of  a user, once a user clicks the logout button they are logged out by removing their\r\n    current session from the database via the function users.delete_session(),\r\n    their cookie is also removed thus logging them out,\r\n    a redirect occurs once successfully logged out to index page where they will once again be asked to login\r\n    \"\"\"\r\n    users.delete_session(db, users.session_user(db))\r\n\r\n    response.delete_cookie(users.COOKIE_NAME)\r\n\r\n    redirect('/')\r\n\r\n@app.post('/addtask', methods=['GET'])\r\ndef task(db):\r\n    \"\"\"\"\r\n    redirects to the addtask form page\r\n    \"\"\"\r\n\r\n    info = {'title': 'Add Task',\r\n            'bannerMessage': 'yeanah'}\r\n\r\n    return template('addtask',info, authenticated=users.session_user(db))\r\n\r\n@app.post('/addingtask', methods=['GET'])\r\ndef task(db):\r\n    \"\"\"\"\r\n    Will take the form from addtask.html and add the respective task to the database\r\n    \"\"\"\r\n    userID = users.session_user(db)\r\n    owner = request.forms.get(\"owner\")\r\n    title = request.forms.get(\"title\")\r\n    location = request.forms.get(\"location\")\r\n    description = request.forms.get(\"descrip\")\r\n\r\n    database.add_jobListing(db,userID, owner, title, location, description)\r\n\r\n    redirect('/')\r\n\r\n@app.post('/gettask', methods=['GET'])\r\ndef task(db):\r\n    \"\"\"\"\r\n    Will return based on the button pressed. It will then return the relative tasks in a top 10 format\r\n    \"\"\"\r\n\r\n    tasktype = request.forms.get(\"tasktype\")\r\n\r\n    if tasktype == \"1\":\r\n        usrid = users.session_user(db)\r\n        tasklist = database.position_list(db,usrid)\r\n        newtrack = []\r\n\r\n        loginisTrue = False\r\n\r\n        if users.session_user(db):\r\n            loginisTrue = True\r\n\r\n        for x in tasklist:\r\n            dict1 = {\r\n                        'id': x[0],\r\n                        'time': x[1],\r\n                        'owner': x[2],\r\n                        'title': x[3],\r\n                        'location': x[4],\r\n                        'description': x[5]\r\n                    }\r\n            newtrack.append(dict1)\r\n        info = {'title': 'Account',\r\n                'bannerMessage': '',\r\n                'task' : newtrack}\r\n\r\n        return template('index',info, authenticated=users.session_user(db), tasksexist = True, loginIsTrue=loginisTrue )\r\n\r\n    if tasktype == \"0\":\r\n            tasklist = database.position_list(db,None)\r\n            newtrack = []\r\n\r\n            loginisTrue = False\r\n\r\n            if users.session_user(db):\r\n                loginisTrue = True\r\n\r\n            for x in tasklist:\r\n                dict1 = {\r\n                    'id': x[0],\r\n                    'time': x[1],\r\n                    'owner': x[2],\r\n                    'title': x[3],\r\n                    'location': x[4],\r\n                    'description': x[5]\r\n                }\r\n                newtrack.append(dict1)\r\n            info = {'title': 'Account',\r\n                    'bannerMessage': '',\r\n                    'task': newtrack}\r\n\r\n            return template('index', info, authenticated=users.session_user(db), tasksexist=True,\r\n                            loginIsTrue=loginisTrue)\r\n\r\n\r\n@app.post('/deletetask', methods=['GET'])\r\ndef task(db):\r\n    \"\"\"\"\r\n    Deletes respective ID'd task\r\n    \"\"\"\r\n    taskid = request.forms.get(\"taskid\")\r\n    print(taskid)\r\n    database.delete_jobListing(db, taskid)\r\n    redirect('/')\r\n\r\nif __name__ == '__main__':\r\n\r\n    from bottle.ext import sqlite\r\n    from database import DATABASE_NAME\r\n    # install the database plugin to utilise db parameter calling\r\n    app.install(sqlite.Plugin(dbfile=DATABASE_NAME))\r\n    app.run(debug=True, port=8010)\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- main.py	(revision 9f58489c9104ad3fbf1a6284b5a7c2828476aa70)
+++ main.py	(date 1598316445572)
@@ -1,12 +1,15 @@
 
 from bottle import Bottle, template, static_file, redirect, request, response
 import database
+
 import users
 import re
 import os
 
+
 app = Bottle()
 
+
 @app.route('/static/<filename:path>')
 def static(filename):
 
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" project-jdk-name=\"Python 3.7 (Comp4050)\" project-jdk-type=\"Python SDK\" />\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 9f58489c9104ad3fbf1a6284b5a7c2828476aa70)
+++ .idea/misc.xml	(date 1598316445579)
@@ -1,4 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.7 (Comp4050)" project-jdk-type="Python SDK" />
+  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.8" project-jdk-type="Python SDK" />
 </project>
\ No newline at end of file
Index: .idea/OnlineWebsiteComp4050.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"PYTHON_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\">\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <excludeFolder url=\"file://$MODULE_DIR$/venv\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"Python 3.7 (Comp4050)\" jdkType=\"Python SDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n  </component>\r\n  <component name=\"TestRunnerService\">\r\n    <option name=\"PROJECT_TEST_RUNNER\" value=\"Unittests\" />\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/OnlineWebsiteComp4050.iml	(revision 9f58489c9104ad3fbf1a6284b5a7c2828476aa70)
+++ .idea/OnlineWebsiteComp4050.iml	(date 1598316445586)
@@ -4,10 +4,7 @@
     <content url="file://$MODULE_DIR$">
       <excludeFolder url="file://$MODULE_DIR$/venv" />
     </content>
-    <orderEntry type="jdk" jdkName="Python 3.7 (Comp4050)" jdkType="Python SDK" />
+    <orderEntry type="jdk" jdkName="Python 3.8" jdkType="Python SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
   </component>
-  <component name="TestRunnerService">
-    <option name="PROJECT_TEST_RUNNER" value="Unittests" />
-  </component>
 </module>
\ No newline at end of file
